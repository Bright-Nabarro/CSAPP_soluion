0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 80ea00000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
0x018:                      | 	.align	8
0x018:                      | g_data:
0x018: 0800000000000000     | 	.quad	8
0x020: 0700000000000000     | 	.quad	7
0x028: 0600000000000000     | 	.quad	6
0x030: 0500000000000000     | 	.quad	5
0x038: 0400000000000000     | 	.quad	4
0x040: 0300000000000000     | 	.quad	3
0x048: 0200000000000000     | 	.quad	2
0x050: 0100000000000000     | 	.quad	1
0x058:                      | g_end:
                            | 
0x058:                      | bubble_sort:
                            | #	iaddq	$-8, %rsi
0x058: 30f90800000000000000 | 	irmovq	$8, %r9
0x062: 6196                 | 	subq	%r9, %rsi
0x064: 70d100000000000000   | 	jmp	L2
0x06d:                      | L3:
                            | #	iaddq	$8, %rax
0x06d: 30f90800000000000000 | 	irmovq	$8, %r9
0x077: 6090                 | 	addq	%r9, %rax
0x079:                      | L5:
                            | #	cmpq	%rsi, %rax
0x079: 2008                 | 	rrmovq	%rax, %r8
0x07b: 6168                 | 	subq	%rsi, %r8
0x07d: 73c500000000000000   | 	je	L7
0x086: 50200800000000000000 | 	mrmovq	8(%rax), %rdx		# data[i+1]
0x090: 50100000000000000000 | 	mrmovq	(%rax), %rcx		# data[i]
                            | #	cmpq	%rcx, %rdx
                            | #	rrmovq	%rdx, %r9
                            | #	subq	%rcx, %r9
                            | # #	jge	L3
                            | # #	rmmovq	%rcx, 8(%rax)
                            | # #	rmmovq	%rdx, (%rax)
                            | #	cmovl	%rdx, %r11
                            | #	cmovl	%rcx, %rdx
                            | #	cmovl	%r11, %rcx
                            | #	rmmovq	%rdx, 8(%rax)
                            | #	rmmovq	%rcx, (%rax)
                            | #	a = a ^ b
                            | #	b = a ^ b
                            | #	a = a ^ b
                            | #	a = %rcx, b = %rdx
0x09a: 201a                 | 	rrmovq	%rcx, %r10
0x09c: 6321                 | 	xorq	%rdx, %rcx		# a = a ^ b
                            | #	just judge========
0x09e: 2029                 | 	rrmovq	%rdx, %r9
0x0a0: 6119                 | 	subq	%rcx, %r9
                            | #	judge end=========
0x0a2: 25a2                 | 	cmovge	%r10, %rdx		# if not satisfied, donot change, %rdx = a
0x0a4: 6312                 | 	xorq	%rcx, %rdx		# %rcx = a ^ b, if %rdx = b above, %rdx = a. otherwise %rdx = a
0x0a6: 6321                 | 	xorq	%rdx, %rcx
0x0a8: 40200800000000000000 | 	rmmovq	%rdx, 8(%rax)
0x0b2: 40100000000000000000 | 	rmmovq	%rcx, (%rax)
0x0bc: 706d00000000000000   | 	jmp	L3
0x0c5:                      | L7:
                            | #	iaddq	$-8, %rsi
0x0c5: 30f90800000000000000 | 	irmovq	$8, %r9
0x0cf: 6196                 | 	subq	%r9, %rsi
0x0d1:                      | L2:
                            | #	cmpq	%rdi, %rsi
0x0d1: 2068                 | 	rrmovq	%rsi, %r8
0x0d3: 6178                 | 	subq	%rdi, %r8
0x0d5: 73e900000000000000   | 	je	L8
0x0de: 2070                 | 	rrmovq	%rdi, %rax
0x0e0: 707900000000000000   | 	jmp	L5
0x0e9:                      | L8:
0x0e9: 90                   | 	ret
                            | 
0x0ea:                      | main:
0x0ea: 30f71800000000000000 | 	irmovq	g_data, %rdi
0x0f4: 30f65800000000000000 | 	irmovq	g_end, %rsi
0x0fe: 805800000000000000   | 	call	bubble_sort
0x107: 90                   | 	ret
                            | 	
0x200:                      | .pos 0x200
0x200:                      | stack:
